install.packages("RColorBrewer")
require("RColorBrewer")
palette(c(brewer.pal(n = 8, name = "Dark2"), brewer.pal(n = 8, name = "Set2")))
ancients.f3<-read.table("http://bioinf.gen.tcd.ie/gdd/ancients.f3", stringsAsFactors =
TRUE, header=TRUE )
levels(ancients.f3$TargetPop)
#load the PCA results, stored in the ".evec" file"
pca.world<-read.csv("http://bioinf.gen.tcd.ie/gdd/world_pca.evec", stringsAsFactors = TRUE,
header = TRUE )
#the eigenvector/PCA positions
head(pca.world)
levels(pca.world$Country)
malta.f3<-ancients.f3[ancients.f3$TargetPop=="Siberian_Upper_Paleolitic",]
malta.f3.ordered<-malta.f3[order(malta.f3$f3,decreasing = TRUE),]
malta.f3.ordered
malta.f3<-ancients.f3[ancients.f3$TargetPop=="Siberian_Upper_Paleolithic",]
malta.f3.ordered<-malta.f3[order(malta.f3$f3,decreasing = TRUE),]
malta.f3.ordered
malta.f32<-ancients.f3[ancients.f3$TargetPop=="Luxembourg_Mesolithic",]
malta.f32.ordered<-malta.f32[order(malta.f3$f3,decreasing = TRUE),]
malta.f32.ordered
malta.f32<-ancients.f3[ancients.f3$TargetPop=="Swedish_HunterGatherer",]
malta.f32.ordered<-malta.f32[order(malta.f3$f3,decreasing = TRUE),]
malta.f32.ordered
malta.f32<-ancients.f3[ancients.f3$TargetPop=="LaBrana",]
malta.f32.ordered<-malta.f32[order(malta.f3$f3,decreasing = TRUE),]
malta.f32.ordered
levels(ancients.f3$TargetPop)
malta.f32<-ancients.f3[ancients.f3$TargetPop=="Tyrolean_Iceman",]
malta.f32.ordered<-malta.f32[order(malta.f3$f3,decreasing = TRUE),]
malta.f32.ordered
malta.f3.ordered
malta.f32<-ancients.f3[ancients.f3$TargetPop=="Swedish_Farmer",]
malta.f32.ordered<-malta.f32[order(malta.f3$f3,decreasing = TRUE),]
malta.f3.ordered
malta.f32.ordered
malta.f32<-ancients.f3[ancients.f3$TargetPop=="tyolean_iceman",]
malta.f32.ordered<-malta.f32[order(malta.f3$f3,decreasing = TRUE),]
malta.f32.ordered
levels(ancients.f3$TargetPop)
malta.f32<-ancients.f3[ancients.f3$TargetPop=="tyolean_iceman",]
malta.f32.ordered<-malta.f32[order(malta.f3$f3,decreasing = TRUE),]
malta.f32.ordered
levels(ancients.f3$TargetPop)
malta.f33<-ancients.f3[ancients.f3$TargetPop=="Luxembourg_Mesolithic",]
malta.f33.ordered<-malta.f33[order(malta.f3$f3,decreasing = TRUE),]
malta.f33.ordered
#we set the shape of points using the "pch" parameter
plot(x = pca.world$PC1, y = pca.world$PC2, xlab = "PC1", ylab = "PC2", pch=20)
plot(x = pca.world$PC1, y = pca.world$PC2, col = pca.world$Region, pch = 20,
xlab = "PC1", ylab = "PC2")
legend("bottomleft", legend = levels(pca.world$Region),
col = 1:length(levels(pca.world$Region)), pch = 20)
plot(x = pca.world$PC1, y = pca.world$PC2, col = pca.world$Region,
pch = pca.world$Shape , xlab = "PC1", ylab = "PC2")
legend("bottomleft", legend = levels(pca.world$Region),
col = 1:nlevels(pca.world$Region), pch = 20)
#The layout() function does this: here we change the layout to be 1
#column, two rows, and modify the height. Let's plot to a pdf file.
pdf("world_pca_fine_groupings_page7.pdf")
layout(matrix(c(1,2), ncol = 1), heights = c(1.5, 1))
#We can also change the margins. We change the global parameters for #plots using
the par() function, and modify the margin sizes with the #mar parameter:
par(mar = c(4, 4, 0, 0))
#This time when we're plotting, reduce the size of all the text.
#We do this using the cex parameters.
plot(x = pca.world$PC1, y = pca.world$PC2, col = pca.world$Region,
pch = pca.world$Shape , xlab="PC1", ylab = "PC2",
cex = 0.5, lwd = 0.5)
#make the continent-level legend
legend("bottomleft", legend = levels(pca.world$Region),
col = 1:nlevels(pca.world$Region), pch = 20, cex = 0.5)
#plot.new() moves to the next plot, the one in the second row
plot.new()
#we set the shape of points using the "pch" parameter
> plot(x = pca.world$PC1, y = pca.world$PC2, xlab = "PC1", ylab = "PC2", pch=20)
> plot(x = pca.world$PC1, y = pca.world$PC2, col = pca.world$Region, pch = 20,
+      xlab = "PC1", ylab = "PC2")
> legend("bottomleft", legend = levels(pca.world$Region),
+        col = 1:length(levels(pca.world$Region)), pch = 20)
> plot(x = pca.world$PC1, y = pca.world$PC2, col = pca.world$Region,
+      pch = pca.world$Shape , xlab = "PC1", ylab = "PC2")
> legend("bottomleft", legend = levels(pca.world$Region),
+        col = 1:nlevels(pca.world$Region), pch = 20)
> #The layout() function does this: here we change the layout to be 1
> #column, two rows, and modify the height. Let's plot to a pdf file.
> pdf("world_pca_fine_groupings_page7.pdf")
> layout(matrix(c(1,2), ncol = 1), heights = c(1.5, 1))
#The layout() function does this: here we change the layout to be 1
#column, two rows, and modify the height. Let's plot to a pdf file.
pdf("world_pca_fine_groupings_page7.pdf")
layout(matrix(c(1,2), ncol = 1), heights = c(1.5, 1))
plot(x = pca.world$PC1, y = pca.world$PC2, col = pca.world$Region,
pch = pca.world$Shape , xlab="PC1", ylab = "PC2",
cex = 0.5, lwd = 0.5)
#make the continent-level legend
legend("bottomleft", legend = levels(pca.world$Region),
col = 1:nlevels(pca.world$Region), pch = 20, cex = 0.5)
#plot.new() moves to the next plot, the one in the second row
plot.new()
#we can change the margin parameters of the second plot
par(mar =rep(0, 4))
#makes a data frame such that each population has a unique row
#we will use this to make the legend
pca.world.leg<-unique(pca.world[,c("PopulationVerbose","Region","Shape","Colour")])
legend("center", legend=pca.world.leg$PopulationVerbose, col=pca.world.leg$Region,
pch=pca.world.leg$Shape,
ncol = 8, cex = 0.45,
text.width = rep(0.115,3), bty = "n",
pt.lwd = 0.4)
#stop plotting to the pdf file
dev.off()
#reset the layout
#these are the default settings for the margin size
layout(c(1,1))
par(mar = c(5, 4, 4, 2) + 0.1)
plot(x = pca.world$PC2, y = pca.world$PC3, xlab = "PC2", ylab = "PC3", pch=20)
plot(x = pca.world$PC2, y = pca.world$PC3, col = pca.world$Region, pch = 20,xlab = "PC2", ylab = "PC3")
legend("bottomleft", legend = levels(pca.world$Region),
col = 1:nlevels(pca.world$Region), pch = 20, cex = 0.5)
#Extract Irish Mesolithic genomes and save it in a table
#extracts rows in which the values of "Pop" column is "Ancient Ireland Mesolithic":
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Mesolithic",]
#Add the Mesolithic samples as points on the previous plot
#change the shape to square using pch = 22
#make the symbol size large using the cex parameter
#fill in the square red using the bg parameter
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
#Note: the points() function adds points to a plot that has already been made. You
need to have already run the plot command above.
#You may have to combine all of these steps within pdf() and dev.off() functions. In
this case, both the plot() and points() functions have to be within pdf() and dev.off()
pdf("ancient_human_pca_page9.pdf")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Mesolithic",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
pdf("ancient_human_pca_page9.pdf")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Mesolithic",]
moderns.pca<-read.csv("http://bioinf.gen.tcd.ie/gdd/europe_pca_moderns.evec",
stringsAsFactors = T, header=T)
ancients.pca<-read.csv("http://bioinf.gen.tcd.ie/gdd/europe_pca_ancients.evec",
stringsAsFactors = T, header=T)
plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
moderns.pca[moderns.pca$Region == "Mediterranean Islands",]
#Extract Irish Mesolithic genomes and save it in a table
#extracts rows in which the values of "Pop" column is "Ancient Ireland Mesolithic":
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Mesolithic",]
#Add the Mesolithic samples as points on the previous plot
#change the shape to square using pch = 22
#make the symbol size large using the cex parameter
#fill in the square red using the bg parameter
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
#Note: the points() function adds points to a plot that has already been made. You
need to have already run the plot command above.
#You may have to combine all of these steps within pdf() and dev.off() functions. In
this case, both the plot() and points() functions have to be within pdf() and dev.off()
pdf("ancient_human_pca_page9.pdf")
plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
dev.off()
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Mesolithic",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
pdf("ancient_human_pca_page9.pdf"
plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
dev.off()
plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
dev.off()
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Neolithic",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "blue")
pdf("ancient_human_pca_page9.pdf")
dev.off()
pdf("ancient_human_pca_page9.pdf")plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
dev.off()
pdf("ancient_human_pca_page9.pdf")plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12 0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
dev.off()
pdf("ancient_human_pca_page9.pdf")plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
dev.off()
pdf("ancient_human_pca_page9.pdf")plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
dev.off()
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "blue")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Mesolithic",]
moderns.pca<-read.csv("http://bioinf.gen.tcd.ie/gdd/europe_pca_moderns.evec",
stringsAsFactors = T, header=T)
ancients.pca<-read.csv("http://bioinf.gen.tcd.ie/gdd/europe_pca_ancients.evec",
stringsAsFactors = T, header=T)
plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Mesolithic",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Neolithic"",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "blue")
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "blue")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Neolithic"",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Neolithic,]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Neolithic",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland
Bronze",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "pink")
plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Neolithic"",]
l
0)
ug
aedfa
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Mesolithic",]
> points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Mesolithic",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland
Bronze",]
> points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland
Bronze",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland
Bronze",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "blue")
plot(ancients.pca.hg)
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland
Bronze",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
plot(ancients.pca.hg)
moderns.pca<-read.csv("http://bioinf.gen.tcd.ie/gdd/europe_pca_moderns.evec",
stringsAsFactors = T, header=T)
ancients.pca<-read.csv("http://bioinf.gen.tcd.ie/gdd/europe_pca_ancients.evec",
stringsAsFactors = T, header=T)
plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland
Bronze",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Mesolithic",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
ancients.pca.hg<-ancients.pca[ancients.pca$Pop == "Ancient Ireland Bronze",]
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
plot(x = moderns.pca$PC1, y = moderns.pca$PC2, col = moderns.pca$Region, pch = 20,
xlim = c(-0.12,0.1), xlab = "PC1", ylab = "PC2")
legend(x = "topright", legend = levels(moderns.pca$Region),
col = 1:nlevels(moderns.pca$Region), pch = 20, cex = 0.7, y.intersp = 0.8)
points(x = ancients.pca.hg$PC1, y = ancients.pca.hg$PC2, pch = 22, cex = 2, bg = "red")
dstats<-read.table("http://bioinf.gen.tcd.ie/gdd/archaics.dstats",
header=T)
nean.dstats<-dstats[dstats$H3 == "Neandertal_Altai",]
nean.dstats[abs(nean.dstats$Z) >= 3 ,]
nean.dstats[abs(nean.dstats$Z) z<3 ,]
nean.dstats[abs(nean.dstats$Z) >= 3 ,]
test<- nean.dstats[abs(nean.dstats$Z) >= 3 ,]
veiw(test)
open(test)
veiw(test)
test<- nean.dstats[abs(nean.dstats$Z<3) >= 3 ,]
open(test)
nean.dstats[abs(nean.dstats$Z<3) >= 3 ,]
nean.dstats[abs(nean.dstats$Z>3) >= 3 ,]
nean.dstats[abs(nean.dstats$Z)Z >= 3 ,]
nean.dstats[abs(nean.dstats$Z),Z >= 3 ,]
demo()
install.packages(c("ape", "boot", "class", "cluster", "clusterGeneration", "codetools", "expm", "fastmatch", "foreign", "igraph", "KernSmooth", "lattice", "magrittr", "maps", "MASS", "Matrix", "mgcv", "mnormt", "nlme", "nnet", "phangorn", "phytools", "plotrix", "RColorBrewer", "Rcpp", "rpart", "scatterplot3d", "spatial", "survival"))
ltr_info <- ltr %>%
mutate(
diff = if_else(LastPos > FirstPos, (LastPos + 1) - FirstPos, (FirstPos + 1) - LastPos)
) %>%
select(id, diff) %>%
mutate(diff = as.character(diff))
setwd("~/")
setwd("~/RetroTector-main")
setwd("~/Sql_Output")
read.csv(/Users/eoinoconnell/Sql_Output/ltrs_with_headers.csv)
test <- read.csv("/Users/eoinoconnell/Sql_Output/ltrs_with_headers.csv")
View(test)
ltr_info <- ltr_info %>%
mutate(
diff = if_else(LastPos > FirstPos, (LastPos + 1) - FirstPos, (FirstPos + 1) - LastPos)
) %>%
select(id, diff) %>%
mutate(diff = as.character(diff))
library(dplyr)
BiocManager::install('dplyr')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
BiocManager::install('dplyr')
ltr_info <- ltrs %>%
mutate(
diff = if_else(LastPos > FirstPos, (LastPos + 1) - FirstPos, (FirstPos + 1) - LastPos)
) %>%
select(id, diff) %>%
mutate(diff = as.character(diff)
\c
test <- ltrs %>%
mutate(
diff = if_else(LastPos > FirstPos, (LastPos + 1) - FirstPos, (FirstPos + 1) - LastPos)
) %>%
select(id, diff) %>%
mutate(diff = as.character(diff)
)
library(dplyr)
test <- ltrs %>%
mutate(
diff = if_else(LastPos > FirstPos, (LastPos + 1) - FirstPos, (FirstPos + 1) - LastPos)
) %>%
select(id, diff) %>%
mutate(diff = as.character(diff))
Ltr_info <- test %>%
mutate(
diff = if_else(LastPos > FirstPos, (LastPos + 1) - FirstPos, (FirstPos + 1) - LastPos)
) %>%
select(id, diff) %>%
mutate(diff = as.character(diff))
View(Ltr_info)
View(test)
LTRs <- read.csv("/Users/eoinoconnell/Sql_Output/lTRs_With_Headers.csv")
LTRs <- read.csv("/Users/eoinoconnell/Sql_Output/VipUrs/LTRs_With_Headers.csv")
Ltr_info <- LTRs %>%
mutate(
diff = if_else(LastPos > FirstPos, (LastPos + 1) - FirstPos, (FirstPos + 1) - LastPos)
) %>%
select(id, diff) %>%
mutate(diff = as.character(diff))
View(test)
remove(test)
Chains <- read.csv("/Users/eoinoconnell/Sql_Output/VipUrs/Chains_With_Headers.csv")
View(Chains)
View(Chains)
chain_info <- Chains %>%
mutate(
RT = ifelse(is.na(LTR5id) & is.na(LTR3id), "RT", "RT_LTR")
) %>%
select(Chromosome, Start, End, Strand, RT, LTR5id, LTR3id) %>%
mutate(LTR5id = as.character(LTR5id), LTR3id = as.character(LTR3id))
View(chain_info)
View(chain_info)
positions_split <- apply(chain_info, 1, function(x) {
if (as.integer(x[2]) > as.integer(x[3])) {
x[c(2, 3)] <- x[c(3, 2)]
}
if (x[4] == "S") {
x[c(6, 7)] <- x[c(7, 6)]
x[4] <- ifelse(x[4] == "P", "+", "-")
}
ltr5 <- ifelse(any(grepl(paste0("^", x[6], " "), names(ltr_info))), ltr_info[paste0("^", x[6], " ")], 0)
ltr3 <- ifelse(any(grepl(paste0("^", x[7], " "), names(ltr_info))), ltr_info[paste0("^", x[7], " ")], 0)
c(x, list(c(as.integer(x[2]), as.integer(x[3]), x[4], ltr5, ltr3)))
})
# Sort data
positions_split <- positions_split[order(sapply(positions_split, function(x) paste(x[1:4], collapse = ","))), ]
positions_split <- apply(chain_info, 1, function(x) {
if (as.integer(x[2]) > as.integer(x[3])) {
x[c(2, 3)] <- x[c(3, 2)]
}
if (x[4] == "S") {
x[c(6, 7)] <- x[c(7, 6)]
x[4] <- ifelse(x[4] == "P", "+", "-")
}
ltr5 <- ifelse(any(grepl(paste0("^", x[6], " "), names(Ltr_info))), Ltr_info[paste0("^", x[6], " ")], 0)
ltr3 <- ifelse(any(grepl(paste0("^", x[7], " "), names(Ltr_info))), Ltr_info[paste0("^", x[7], " ")], 0)
c(x, list(c(as.integer(x[2]), as.integer(x[3]), x[4], ltr5, ltr3)))
})
# Sort data
positions_split <- positions_split[order(sapply(positions_split, function(x) paste(x[1:4], collapse = ","))), ]
View(positions_split)
positions_split <- apply(chain_info, 1, function(x) {
if (as.integer(x[2]) > as.integer(x[3])) {
x[c(2, 3)] <- x[c(3, 2)]
}
if (x[4] == "S") {
x[c(6, 7)] <- x[c(7, 6)]
x[4] <- ifelse(x[4] == "P", "+", "-")
}
ltr5 <- ifelse(any(grepl(paste0("^", x[6], " "), names(Ltr_info))), Ltr_info[paste0("^", x[6], " ")], 0)
ltr3 <- ifelse(any(grepl(paste0("^", x[7], " "), names(Ltr_info))), Ltr_info[paste0("^", x[7], " ")], 0)
c(x, list(c(as.integer(x[2]), as.integer(x[3]), x[4], ltr5, ltr3)))
})
# Sort data
positions_split <- positions_split[order(sapply(positions_split, function(x) paste(x[1:4], collapse = ","))), ]
# Sort data
positions_split <- positions_split[order(sapply(positions_split, function(x) paste(x[1:8], collapse = ","))), ]
head(positions_split)
View(positions_split)
tail()
tail(positions_split)
